### GD:
gd <- data.frame(
median=median(party_grouped$gd),
fifty=nrow(party_grouped[party_grouped$`gd` > 0.5, ])/nrow(party_grouped),
forty=nrow(party_grouped[party_grouped$`gd` > 0.4, ])/nrow(party_grouped),
one=nrow(party_grouped[party_grouped$`gd` > 0.01, ])/nrow(party_grouped)
)%>%
mutate(party="GD")
### UNM:
unm <- data.frame(
median=median(party_grouped$unm),
fifty=nrow(party_grouped[party_grouped$`unm` > 0.5, ])/nrow(party_grouped),
forty=nrow(party_grouped[party_grouped$`unm` > 0.4, ])/nrow(party_grouped),
one=nrow(party_grouped[party_grouped$`unm` > 0.01, ])/nrow(party_grouped)
)%>%
mutate(party="UNM")
### EG:
eg <- data.frame(
median=median(party_grouped$eg),
fifty=nrow(party_grouped[party_grouped$`eg` > 0.5, ])/nrow(party_grouped),
forty=nrow(party_grouped[party_grouped$`eg` > 0.4, ])/nrow(party_grouped),
one=nrow(party_grouped[party_grouped$`eg` > 0.01, ])/nrow(party_grouped)
)%>%
mutate(party="EG")
### Patriots:
pa <- data.frame(
median=median(party_grouped$pa),
fifty=nrow(party_grouped[party_grouped$`pa` > 0.5, ])/nrow(party_grouped),
forty=nrow(party_grouped[party_grouped$`pa` > 0.4, ])/nrow(party_grouped),
one=nrow(party_grouped[party_grouped$`pa` > 0.01, ])/nrow(party_grouped)
)%>%
mutate(party="PA")
### Agmashenebeli:
ag <- data.frame(
median=median(party_grouped$ag),
fifty=nrow(party_grouped[party_grouped$`ag` > 0.5, ])/nrow(party_grouped),
forty=nrow(party_grouped[party_grouped$`ag` > 0.4, ])/nrow(party_grouped),
one=nrow(party_grouped[party_grouped$`ag` > 0.01, ])/nrow(party_grouped)
)%>%
mutate(party="AG")
###Labor:
la <- data.frame(
median=median(party_grouped$la),
fifty=nrow(party_grouped[party_grouped$`la` > 0.5, ])/nrow(party_grouped),
forty=nrow(party_grouped[party_grouped$`la` > 0.4, ])/nrow(party_grouped),
one=nrow(party_grouped[party_grouped$`la` > 0.01, ])/nrow(party_grouped)
)%>%
mutate(party="LA")
### Lelo
le <- data.frame(
median=median(party_grouped$le),
fifty=nrow(party_grouped[party_grouped$`le` > 0.5, ])/nrow(party_grouped),
forty=nrow(party_grouped[party_grouped$`le` > 0.4, ])/nrow(party_grouped),
one=nrow(party_grouped[party_grouped$`le` > 0.01, ])/nrow(party_grouped)
)%>%
mutate(party="LE")
### Girchi
gi <- data.frame(
median=median(party_grouped$gi),
fifty=nrow(party_grouped[party_grouped$`gi` > 0.5, ])/nrow(party_grouped),
forty=nrow(party_grouped[party_grouped$`gi` > 0.4, ])/nrow(party_grouped),
one=nrow(party_grouped[party_grouped$`gi` > 0.01, ])/nrow(party_grouped)
)%>%
mutate(party="GI")
### bind together all parties
rbind(gd,unm,eg,pa,ag,la,le,gi)%>%write.csv("parties.csv", na = "", row.names = F)
### Plots of predictions
ggplot(preds, aes(`2020-10-20`, group=party, fill=party, color=party))+
geom_density_interactive(aes(y = (..count..)/sum(..count..), tooltip=party), alpha=0.5)+
scale_fill_manual(values=c( "#195ea2", "#dc082b", "#003a75", "#e7b031"))+
scale_color_manual(values=c( "#195ea2", "#dc082b", "#003a75", "#e7b031"))+
geom_vline(xintercept = 0.5)+
geom_vline(xintercept = 0.4)+
geom_vline(xintercept = 0.01)+
geom_vline(xintercept = median(mu_dream$`2020-10-20`), color="#0077be", linetype = "longdash")+
geom_vline(xintercept = median(mu_unm$`2020-10-20`), color="#dc082b", linetype = "longdash")+
geom_vline(xintercept = median(mu_eurogeo$`2020-10-20`), color="#003a75", linetype = "longdash")+
geom_vline(xintercept = median(mu_apg$`2020-10-20`), color="#e7b031", linetype = "longdash")+
annotate("text", x = median(mu_dream$`2020-10-20`), y = 0.009,  color="#0077be", label = sprintf("%0.f", round(median(mu_dream$`2020-10-20`)*100, digits = 0)))+
annotate("text", x = median(mu_unm$`2020-10-20`), y = 0.009,  color="#dc082b", label = sprintf("%0.f", round(median(mu_unm$`2020-10-20`)*100, digits = 0)))+
annotate("text", x = median(mu_eurogeo$`2020-10-20`), y = 0.009,  color="#003a75", label = sprintf("%0.f", round(median(mu_eurogeo$`2020-10-20`)*100, digits = 0)))+
annotate("text", x = median(mu_apg$`2020-10-20`), y = 0.009,  color="#e7b031", label = sprintf("%0.f", round(median(mu_apg$`2020-10-20`)*100, digits = 0)))+
annotate("text", x = 0.01, y = 0.008,  label = "1%-იანი\nსაარჩევნო\nბარიერი", family="BPG Excelsior Exp")+
annotate("text", x = 0.4, y = 0.008,  label = "40%-იანი\nჩამკეტი\nბარიერი", family="BPG Excelsior Exp")+
scale_x_continuous(labels=function(x)x*100, limits=c(0, 1))+
# facet_wrap(~party)
labs(# title="პოლიტიკური პარტიების სიმულირებული პროპორცია",
# subtitle="წარწერებზე მოცემულია სიმულაციათა მედიანური მნიშვნელობები",
caption="ეფუძნება 2000 სიმულაციას,\nაპრიორულ ალბათობად მიჩნეულია\n2017 და 2018 წლის არჩევნების შედეგები",
x="%")+
theme_plot+
theme(legend.position = "bottom",
legend.title = element_blank(),
axis.text.y = element_blank(),
axis.title.y = element_blank(),
axis.ticks.y = element_blank()) -> gg
ggsave("predictions.png", gg, height=8, width=12)
tooltip_css <- "background-color:white;font-family:BPG Excelsior Exp;padding:10px;border-radius:10px 20px 10px 20px;"
gg_a <- girafe(ggobj=gg, width_svg = 9, height_svg = 6)
gg_a <- girafe_options(gg_a, opts_tooltip(css = tooltip_css, opacity = .75))
gg_a
htmlwidgets::saveWidget(gg_a, "model_ka.html")
View(preds)
### Plots of predictions
ggplot(preds, aes(`2020-10-25`, group=party, fill=party, color=party))+
geom_density_interactive(aes(y = (..count..)/sum(..count..), tooltip=party), alpha=0.5)+
scale_fill_manual(values=c( "#195ea2", "#dc082b", "#003a75", "#e7b031"))+
scale_color_manual(values=c( "#195ea2", "#dc082b", "#003a75", "#e7b031"))+
geom_vline(xintercept = 0.5)+
geom_vline(xintercept = 0.4)+
geom_vline(xintercept = 0.01)+
geom_vline(xintercept = median(mu_dream$`2020-10-25`), color="#0077be", linetype = "longdash")+
geom_vline(xintercept = median(mu_unm$`2020-10-25`), color="#dc082b", linetype = "longdash")+
geom_vline(xintercept = median(mu_eurogeo$`2020-10-25`), color="#003a75", linetype = "longdash")+
geom_vline(xintercept = median(mu_apg$`2020-10-25`), color="#e7b031", linetype = "longdash")+
annotate("text", x = median(mu_dream$`2020-10-25`), y = 0.009,  color="#0077be", label = sprintf("%0.f", round(median(mu_dream$`2020-10-25`)*100, digits = 0)))+
annotate("text", x = median(mu_unm$`2020-10-25`), y = 0.009,  color="#dc082b", label = sprintf("%0.f", round(median(mu_unm$`2020-10-25`)*100, digits = 0)))+
annotate("text", x = median(mu_eurogeo$`2020-10-25`), y = 0.009,  color="#003a75", label = sprintf("%0.f", round(median(mu_eurogeo$`2020-10-25`)*100, digits = 0)))+
annotate("text", x = median(mu_apg$`2020-10-25`), y = 0.009,  color="#e7b031", label = sprintf("%0.f", round(median(mu_apg$`2020-10-25`)*100, digits = 0)))+
annotate("text", x = 0.01, y = 0.008,  label = "1%-იანი\nსაარჩევნო\nბარიერი", family="BPG Excelsior Exp")+
annotate("text", x = 0.4, y = 0.008,  label = "40%-იანი\nჩამკეტი\nბარიერი", family="BPG Excelsior Exp")+
scale_x_continuous(labels=function(x)x*100, limits=c(0, 1))+
# facet_wrap(~party)
labs(# title="პოლიტიკური პარტიების სიმულირებული პროპორცია",
# subtitle="წარწერებზე მოცემულია სიმულაციათა მედიანური მნიშვნელობები",
caption="ეფუძნება 2000 სიმულაციას,\nაპრიორულ ალბათობად მიჩნეულია\n2017 და 2018 წლის არჩევნების შედეგები",
x="%")+
theme_plot+
theme(legend.position = "bottom",
legend.title = element_blank(),
axis.text.y = element_blank(),
axis.title.y = element_blank(),
axis.ticks.y = element_blank()) -> gg
ggsave("predictions.png", gg, height=8, width=12)
tooltip_css <- "background-color:white;font-family:BPG Excelsior Exp;padding:10px;border-radius:10px 20px 10px 20px;"
gg_a <- girafe(ggobj=gg, width_svg = 9, height_svg = 6)
gg_a <- girafe_options(gg_a, opts_tooltip(css = tooltip_css, opacity = .75))
gg_a
library(extrafont); library(dplyr); library(ggplot2); library(rstan); library(reshape2); library(stringr); library(lubridate); library(readxl); library(highcharter); library(tidyr)
library(ggiraph)
options(mc.cores = parallel::detectCores())
setwd("D:\\Dropbox\\pollster.ge\\Geo Parl 2020\\Polls\\modeling\\jim_savage")
### First set up GD polls
polls <- read_excel("Parliamentary 2020.xlsx", sheet = "data")%>%
filter(!WAVEID %in% c("W1", "W5"))%>%
filter(!PARTYCODE %in% c("DK",
"NOPARTY",
"NOTASKED",
"NOTDECIDED",
"REFUSE",
# "OTHER",
"UNDECIDED"
))%>%
mutate(
PARTYCODE = case_when(
PARTYCODE == "SHENEBA" ~ "LELO",
T ~ as.character(PARTYCODE)
),
PARTYCODE = case_when(
PARTYCODE == "FREEDEM" ~ "EUROGEO",
T ~ as.character(PARTYCODE)
),
field_last_day = as.Date(`Field last day`)
)%>%
### Calculate weighted average per each poll (assumption is that this reflects the true situation on polling day)
group_by(WAVEID)%>%
mutate(
Percent = Percent/sum(Percent),
sigma=(AME/4)*0.01
)%>%
group_by(PARTYCODE)%>%
arrange(field_last_day)%>%
ungroup()%>%
mutate(
sigma= tidyr::replace_na(sigma, mean(sigma, na.rm=T)))
weights <- read_excel("Parliamentary 2020.xlsx", sheet = "data")%>%
filter(!WAVEID %in% c("W1", "W5"))%>%
filter(!PARTYCODE %in% c("DK",
"NOPARTY",
"NOTASKED",
"NOTDECIDED",
"REFUSE",
# "OTHER",
"UNDECIDED"
))%>%
mutate(
PARTYCODE = case_when(
PARTYCODE == "SHENEBA" ~ "LELO",
T ~ as.character(PARTYCODE)
),
PARTYCODE = case_when(
PARTYCODE == "FREEDEM" ~ "EUROGEO",
T ~ as.character(PARTYCODE)
),
field_last_day = as.Date(`Field last day`)
)
weights <- polls %>%
filter(PARTYCODE == "GD")%>%
mutate(
PARTYCODE = case_when(
PARTYCODE == "SHENEBA" ~ "LELO",
T ~ as.character(PARTYCODE)
),
PARTYCODE = case_when(
PARTYCODE == "FREEDEM" ~ "EUROGEO",
T ~ as.character(PARTYCODE)
),
field_last_day = as.Date(`Field last day`),
weight=Sys.Date()-field_last_day
)%>%
select(WAVEID, field_last_day)%>%
arrange(field_last_day)%>%
data.frame()
wt <- weights %>%
pivot_wider(WAVEID, names_from = "WAVEID", values_from = "field_last_day") %>%
slice(rep(1:n(), each=nrow(weights)))%>%
cbind(weights)
wt <- data.frame(sapply(wt[1:nrow(weights)], function(x)ifelse(wt$field_last_day-x>=0, wt$field_last_day-x, NA)))%>%
mutate_all(funs(ifelse(.==0, 1, .)))%>%
cbind(weights)%>%
data.frame()%>%
select(W2:WAVEID)%>%
pivot_longer(!WAVEID, names_to = "wave_weight", values_to = "weight")%>%
filter(!is.na(weight))%>%
mutate(weight=1/weight)%>%
rename(weight_id=WAVEID)
polls %>%
filter(PARTYCODE == "GD")%>%
right_join(wt, by=c("WAVEID"="wave_weight"))%>%
group_by(weight_id)%>%
summarize(
Percent = weighted.mean(Percent, 1/as.numeric(weight))
)%>%
# ungroup()%>%
left_join(weights, by=c("weight_id"="WAVEID"))
### Make first for GD
# The polling data
# One row for each day, one column for each poll on that day, -9 for missing values
Y_dream <- polls %>%
filter(PARTYCODE == "GD")%>%
right_join(wt, by=c("WAVEID"="wave_weight"))%>%
group_by(weight_id)%>%
summarize(
Percent = weighted.mean(Percent, weight)
)%>%
left_join(weights, by=c("weight_id"="WAVEID"))%>%
arrange(field_last_day)%>%
mutate(N = 1:n())%>%
filter(N > 8) %>% dcast(field_last_day  ~ N, value.var = "Percent") %>%
dplyr::select(-field_last_day ) %>%
as.data.frame %>% as.matrix
Y_dream[is.na(Y_dream)] <- -9
Y_unm <- polls %>%
filter(PARTYCODE == "UNM")%>%
right_join(wt, by=c("WAVEID"="wave_weight"))%>%
group_by(weight_id)%>%
summarize(
Percent = weighted.mean(Percent, weight)
)%>%
left_join(weights, by=c("weight_id"="WAVEID"))%>%
arrange(field_last_day)%>%
mutate(N = 1:n())%>%
filter(N > 8) %>% dcast(field_last_day ~ N, value.var = "Percent") %>%
dplyr::select(-field_last_day) %>%
as.data.frame %>% as.matrix
Y_unm[is.na(Y_unm)] <- -9
Y_eurogeo <- polls %>%
filter(PARTYCODE == "EUROGEO")%>%
right_join(wt, by=c("WAVEID"="wave_weight"))%>%
group_by(weight_id)%>%
summarize(
Percent = weighted.mean(Percent, weight)
)%>%
# ungroup()%>%
left_join(weights, by=c("weight_id"="WAVEID"))%>%
arrange(field_last_day)%>%
mutate(N = 1:n())%>%
group_by(weight_id)%>%
summarize(field_last_day=first(field_last_day),
Percent=sum(Percent),
N=first(N))%>%
ungroup()%>%
arrange(N)%>%
mutate(N = 1:n())%>%
filter(N > 8) %>% dcast(field_last_day ~ N, value.var = "Percent") %>%
dplyr::select(-field_last_day) %>%
as.data.frame %>% as.matrix
Y_eurogeo[is.na(Y_eurogeo)] <- -9
Y_apg <- polls %>%
filter(PARTYCODE == "APG")%>%
right_join(wt, by=c("WAVEID"="wave_weight"))%>%
group_by(weight_id)%>%
summarize(
Percent = weighted.mean(Percent, weight)
)%>%
# ungroup()%>%
left_join(weights, by=c("weight_id"="WAVEID"))%>%
arrange(field_last_day)%>%
mutate(N = 1:n())%>%
filter(N > 8) %>% dcast(field_last_day ~ N, value.var = "Percent") %>%
dplyr::select(-field_last_day) %>%
as.data.frame %>% as.matrix
Y_apg[is.na(Y_apg)] <- -9
Y_agm <- polls %>%
filter(PARTYCODE == "NEWGEORGIA")%>%
right_join(wt, by=c("WAVEID"="wave_weight"))%>%
filter(!is.na(PARTYCODE))%>%
group_by(weight_id)%>%
summarize(
Percent = weighted.mean(Percent, weight)
)%>%
# ungroup()%>%
left_join(weights, by=c("weight_id"="WAVEID"))%>%
arrange(field_last_day)%>%
mutate(N = 1:n())%>%
filter(N > 8) %>% dcast(field_last_day ~ N, value.var = "Percent") %>%
dplyr::select(-field_last_day) %>%
as.data.frame %>% as.matrix
Y_agm[is.na(Y_agm)] <- -9
Y_lab <- polls %>%
filter(PARTYCODE == "LABOR")%>%
right_join(wt, by=c("WAVEID"="wave_weight"))%>%
filter(!is.na(PARTYCODE))%>%
group_by(weight_id)%>%
summarize(
Percent = weighted.mean(Percent, weight)
)%>%
# ungroup()%>%
left_join(weights, by=c("weight_id"="WAVEID"))%>%
arrange(field_last_day)%>%
mutate(N = 1:n())%>%
filter(N > 8) %>% dcast(field_last_day ~ N, value.var = "Percent") %>%
dplyr::select(-field_last_day) %>%
as.data.frame %>% as.matrix
Y_lab[is.na(Y_lab)] <- -9
Y_lel <- polls %>%
filter(PARTYCODE == "LELO")%>%
right_join(wt, by=c("WAVEID"="wave_weight"))%>%
filter(!is.na(PARTYCODE))%>%
group_by(weight_id)%>%
summarize(
Percent = weighted.mean(Percent, weight)
)%>%
# ungroup()%>%
left_join(weights, by=c("weight_id"="WAVEID"))%>%
arrange(field_last_day)%>%
mutate(N = 1:n())%>%
filter(N > 8) %>% dcast(field_last_day ~ N, value.var = "Percent") %>%
dplyr::select(-field_last_day) %>%
as.data.frame %>% as.matrix
Y_lel[is.na(Y_lel)] <- -9
Y_gir <- polls %>%
filter(PARTYCODE == "GIRCHI")%>%
right_join(wt, by=c("WAVEID"="wave_weight"))%>%
filter(!is.na(PARTYCODE))%>%
group_by(weight_id)%>%
summarize(
Percent = weighted.mean(Percent, weight)
)%>%
# ungroup()%>%
left_join(weights, by=c("weight_id"="WAVEID"))%>%
arrange(field_last_day)%>%
mutate(N = 1:n())%>%
filter(N > 8) %>% dcast(field_last_day ~ N, value.var = "Percent") %>%
dplyr::select(-field_last_day) %>%
as.data.frame %>% as.matrix
Y_gir[is.na(Y_gir)] <- -9
# Do the same for margin of errors for those polls
sigma <- polls %>%
filter(PARTYCODE == "GD")%>%
arrange(field_last_day)%>%
mutate(N = 1:n())%>%
filter(N > 8) %>% dcast(field_last_day ~ N, value.var = "sigma")%>%
dplyr::select(-field_last_day)%>%
as.data.frame %>% as.matrix
sigma[is.na(sigma)] <- -9
Y_agm <- polls %>%
filter(PARTYCODE == "NEWGEORGIA")%>%
right_join(wt, by=c("WAVEID"="wave_weight"))%>%
filter(!is.na(PARTYCODE))%>%
group_by(weight_id)%>%
summarize(
Percent = weighted.mean(Percent, weight)
)%>%
# ungroup()%>%
left_join(weights, by=c("weight_id"="WAVEID"))%>%
arrange(field_last_day)%>%
mutate(N = 1:n())%>%
filter(N > 8) %>% dcast(field_last_day ~ N, value.var = "Percent") %>%
dplyr::select(-field_last_day) %>%
as.data.frame %>% as.matrix
Y_agm[is.na(Y_agm)] <- -9
nrow(y_agm)
nrow(y_Agm)
View(Y_agm)
sigma <- polls %>%
filter(PARTYCODE == "NEWGEORGIA")%>%
arrange(field_last_day)%>%
mutate(N = 1:n())%>%
filter(N > 8) %>%
dcast(field_last_day ~ N, value.var = "sigma")%>%
dplyr::select(-field_last_day)%>%
as.data.frame %>% as.matrix
sigma[is.na(sigma)] <- -9
View(sigma)
sigma <- polls %>%
filter(PARTYCODE == "NEWGEORGIA")%>%
arrange(field_last_day)%>%
mutate(N = 1:n())%>%
# filter(N > 8) %>%
dcast(field_last_day ~ N, value.var = "sigma")%>%
dplyr::select(-field_last_day)%>%
as.data.frame %>% as.matrix
sigma[is.na(sigma)] <- -9
Y_agm <- polls %>%
filter(PARTYCODE == "NEWGEORGIA")%>%
filter(N > 8) %>%
right_join(wt, by=c("WAVEID"="wave_weight"))%>%
filter(!is.na(PARTYCODE))%>%
group_by(weight_id)%>%
summarize(
Percent = weighted.mean(Percent, weight)
)%>%
# ungroup()%>%
left_join(weights, by=c("weight_id"="WAVEID"))%>%
arrange(field_last_day)%>%
mutate(N = 1:n())%>%
filter(N > 8) %>% dcast(field_last_day ~ N, value.var = "Percent") %>%
dplyr::select(-field_last_day) %>%
as.data.frame %>% as.matrix
Y_agm <- polls %>%
filter(PARTYCODE == "NEWGEORGIA")%>%
mutate(N = 1:n())%>%
filter(N > 8)%>%
right_join(wt, by=c("WAVEID"="wave_weight"))%>%
filter(!is.na(PARTYCODE))%>%
group_by(weight_id)%>%
summarize(
Percent = weighted.mean(Percent, weight)
)%>%
# ungroup()%>%
left_join(weights, by=c("weight_id"="WAVEID"))%>%
arrange(field_last_day)%>%
mutate(N = 1:n())%>%
filter(N > 8) %>% dcast(field_last_day ~ N, value.var = "Percent") %>%
dplyr::select(-field_last_day) %>%
as.data.frame %>% as.matrix
Y_agm[is.na(Y_agm)] <- -9
sigma <- polls %>%
filter(PARTYCODE == "GD")%>%
arrange(field_last_day)%>%
mutate(N = 1:n())%>%
filter(N > 8) %>% dcast(field_last_day ~ N, value.var = "sigma")%>%
dplyr::select(-field_last_day)%>%
as.data.frame %>% as.matrix
sigma[is.na(sigma)] <- -9
Y_agm <- polls %>%
filter(PARTYCODE == "NEWGEORGIA")%>%
right_join(wt, by=c("WAVEID"="wave_weight"))%>%
filter(!is.na(PARTYCODE))%>%
group_by(weight_id)%>%
summarize(
Percent = weighted.mean(Percent, weight)
)%>%
# ungroup()%>%
left_join(weights, by=c("weight_id"="WAVEID"))%>%
arrange(field_last_day)%>%
mutate(N = 1:n())%>%
filter(N > 8) %>% dcast(field_last_day ~ N, value.var = "Percent") %>%
dplyr::select(-field_last_day) %>%
as.data.frame %>% as.matrix
Y_agm[is.na(Y_agm)] <- -9
View(Y_agm)
Y_agm <- polls %>%
filter(PARTYCODE == "NEWGEORGIA")%>%
right_join(wt, by=c("WAVEID"="wave_weight"))%>%
filter(!is.na(PARTYCODE))%>%
group_by(weight_id)%>%
summarize(
Percent = weighted.mean(Percent, weight)
)%>%
# ungroup()%>%
left_join(weights, by=c("weight_id"="WAVEID"))%>%
arrange(field_last_day)%>%
mutate(N = 1:n())%>%
filter(N > 8) %>% dcast(field_last_day ~ N, value.var = "Percent") %>%
dplyr::select(-field_last_day) %>%
as.data.frame %>% as.matrix
Y_agm[is.na(Y_agm)] <- -9
sigma <- polls %>%
filter(PARTYCODE == "LABOR")%>%
arrange(field_last_day)%>%
mutate(N = 1:n())%>%
filter(N > 8) %>% dcast(field_last_day ~ N, value.var = "sigma")%>%
dplyr::select(-field_last_day)%>%
as.data.frame %>% as.matrix
sigma[is.na(sigma)] <- -9
View(sigma)
Y_agm <- polls %>%
filter(PARTYCODE == "NEWGEORGIA")%>%
right_join(wt, by=c("WAVEID"="wave_weight"))%>%
filter(!is.na(PARTYCODE))%>%
group_by(weight_id)%>%
summarize(
Percent = weighted.mean(Percent, weight)
)%>%
# ungroup()%>%
left_join(weights, by=c("weight_id"="WAVEID"))%>%
arrange(field_last_day)
sigma <- polls %>%
filter(PARTYCODE == "NEWGEORGIA")%>%
arrange(field_last_day)
